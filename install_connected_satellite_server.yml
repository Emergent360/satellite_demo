---

- name: "Install connected satellite server"
  hosts: all
  gather_facts: no
  vars:
    organization: "Emergent"
    manifest_zip_file: "manifest_connected_satellite_demo.zip"
    ec2_region: us-east-1

    
  tasks:
  - name: remove amazon rhui client
    command: yum -y remove rh-amazon-rhui-client*
    args:
      warn: false
    become: yes

  - name: clean all
    command: yum clean all
    args:
      warn: false
    become: yes
    
  - name: clear repo config
    command: rm -rf /etc/yum.repos.d/*
    args:
      warn: false
    become: yes

  - name: "start rhsmcertd"
    ansible.builtin.systemd:
      name: rhsmcertd
      enabled: yes
      state: started
    become: yes

  - name: set repos to managed
    ansible.builtin.command: >
      subscription-manager config 
      --rhsm.manage_repos=1
    become: yes  

  - name: "check registration status"
    ansible.builtin.shell: >
      subscription-manager status |
      grep "Overall Status:" |
      awk -F': ' '{print $2}'
    register: sub_status
    become: yes  

  - name: copy product-id.conf
    copy:
      src: product-id.conf
      dest: /etc/yum/pluginconf.d/product-id.conf
    become: yes
    
  - name: Register RHEL instance subscription
    ansible.builtin.command: >
      subscription-manager register
      --activationkey "{{ rh_activationkey }}"
      --org "{{ rh_org_id }}"
      --name Satellite_Server
      --force
    become: yes
    register: reg_sub
    until: reg_sub is not failed
    retries: 5
  
  - name: register insights client
    ansible.builtin.command: >
      insights-client 
      --register 
    become: yes  

  - name: register insights client
    ansible.builtin.command: >
      insights-client 
      --display-name "{{ system_name }}"
    become: yes  
  
  - name: Update stage tag to registered
    ec2_tag:
      region: "{{ ec2_region }}"
      resource: "{{ hostvars[inventory_hostname]['ec2_id'] }}"
      state: present
      tags:
        Stage: "registered"
    delegate_to: localhost
    when: reg_sub is not failed

  - name: update and reboot
    yum:
      update_cache: yes
      name: "*"
      state: latest
    become: yes

  - name: Check for reboot needed
    command: /usr/bin/needs-restarting -r
    register: needs_reboot
    ignore_errors: yes
    failed_when: needs_reboot.rc >= 2
    changed_when: needs_reboot.rc == 1

  - name: Reboot if necessary
    reboot:
    when: needs_reboot.rc == 1
    become: yes

  - name: set repolist
    command: subscription-manager repos \
      --enable=rhel-7-server-rpms \
      --enable=rhel-7-server-satellite-6.10-rpms \
      --enable=rhel-7-server-satellite-maintenance-6-rpms \
      --enable=rhel-server-rhscl-7-rpms \
      --enable=rhel-7-server-ansible-2.9-rpms
    become: yes

  - name: install satellite rpm
    yum:
      name: satellite
      state: present
    become: yes

  - name: run satellite installer
    command: satellite-installer \
      --scenario satellite \
      --foreman-initial-organization "Emergent" \
      --foreman-initial-location "Virginia Beach" \
      --foreman-initial-admin-username "{{ local_account_username }}" \
      --foreman-initial-admin-password "{{ local_account_password }}"
#      --foreman-proxy-puppetca true \
#      --foreman-proxy-tftp true \
#      --enable-foreman-plugin-discovery
    become: yes

  - name: "checking for manifest file on /data (satellite media volume)"
    ansible.builtin.stat:
      path: "/data/{{ manifest_zip_file }}"
    register: data

  - name: "manage subscription upload"
    block:
      - name: "checking for existing subscription upload"
        ansible.builtin.command: >
          hammer subscription list
          --organization "{{ organization }}"
        register: sub
        changed_when: no

      - name: "importing manifest file"
        ansible.builtin.command: >
          hammer subscription upload
          --file /data/"{{ manifest_zip_file }}"
          --organization "{{ organization }}"
        when: "'Red Hat Enterprise Linux' not in sub.stdout"
    when: data.stat.exists
    become: yes

  - name: "Upload scap content"
    ansible.builtin.command: >
      hammer scap-content bulk-upload 
      --type default
    become: yes

  - name: print url for console
    debug:
      msg: "Access satellite console at https://{{ ec2_public_dns_name }}"