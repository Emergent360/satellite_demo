---

- name: "Install connected satellite server"
  hosts: all
  become: yes
  gather_facts: no
  vars:
    product: "Red Hat Enterprise Linux for x86_64"
    organization: "Emergent"
    cv_name: "RHEL8"
    content_repos:
      - set_name: "Red Hat Enterprise Linux 8 for x86_64 - AppStream (RPMs)"
        synch_name: "Red Hat Enterprise Linux 8 for x86_64 - AppStream RPMs 8"
      - set_name: "Red Hat Enterprise Linux 8 for x86_64 - BaseOS (RPMs)"
        synch_name: "Red Hat Enterprise Linux 8 for x86_64 - BaseOS RPMs 8"
      - set_name: "Red Hat Satellite Tools 6.10 for RHEL 8 x86_64 (RPMs)"
        synch_name: "Red Hat Satellite Tools 6.10 for RHEL 8 x86_64 RPMs"
    lifecycle_envs:
      - name: Development
        prior: Library
      - name: Production
        prior: Development

  tasks:
  - name: "checking for manifest file on /data (satellite media volume)"
    ansible.builtin.stat:
      path: "/data/{{ manifest_zip_file }}"
    register: data

  - name: "manage subscription upload"
    block:
      - name: "checking for existing subscription upload"
        ansible.builtin.command: >
          hammer subscription list
          --organization "{{ organization }}"
        register: sub
        changed_when: no

      - name: "importing manifest file"
        ansible.builtin.command: >
          hammer subscription upload
          --file /data/"{{ manifest_zip_file }}"
          --organization "{{ organization }}"
        when: "'Red Hat Enterprise Linux' not in sub.stdout"
    when: data.stat.exists

  - name: "set content repositories"
    include_tasks: set_repos.yml
    loop: "{{ content_repos }}"

  - name: "synch content repositories"
    ansible.builtin.command: >
      hammer repository synchronize
      --product "Red Hat Enterprise Linux for x86_64"
      --name "{{ item.synch_name }}"
      --organization "{{ organization }}"
      --async
    loop: "{{ content_repos }}"
    when: false

  - name: "create lifecycle environments"
    include_tasks: set_lifecycle_envs.yml
    loop: "{{ lifecycle_envs }}"

  - name: "get repo ids"
    ansible.builtin.shell: >
      hammer repository list |
      grep "{{ product }}" | 
      awk '{printf "%s%s",sep,$1; sep=","} END{print ""}'
    register: rep_list
    changed_when: false

  - name: "list content views"
    ansible.builtin.command: >
      hammer content-view list
    register: cv_list
    changed_when: false

  - name: "create content view"
    ansible.builtin.command: >
      hammer content-view create
      --name "{{ cv_name }}"
      --repository-ids "{{ rep_list.stdout }}"
      --organization "{{ organization }}"
    when: "cv_name not in cv_list.stdout"

  - name: "get content view id"
    ansible.builtin.shell: >
      hammer content-view list |
      grep "{{ cv_name }}" |
      awk '{printf "%s%s",sep,$1; sep=","} END{print ""}'
    register: cv_ID
    changed_when: false

  - name: "publish content view"
    ansible.builtin.command: >
      hammer content-view publish
      --id cv_ID
      --organization "{{ organization }}"
    when: (cv_ID is defined) and (cv_ID|length > 0)