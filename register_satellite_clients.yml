---
- name: "get registration command"
  hosts: tag_Platform_Satellite
  gather_facts: no
  become: yes
  vars:
    lc_names: 
      "dev": "Development"
      "test" : "Testing"
      "prod" : "Production"


  tasks:
  - name: "get registration command"
    ansible.builtin.command: >
      hammer host-registration generate-command
      --insecure yes 
      --activation-key "rhel8_{{ lc_env }}"
      --hostgroup "{{ lc_env }}_servers"
      --organization Emergent 
      --location "Virginia Beach"
      --lifecycle-environment "{{ lc_names[lc_env] }}" 
      --update-packages no
    register: gen_command

  - name: "save reg command"
    set_fact: reg_command="{{ gen_command.stdout }}"

- name: "register satellite clients"
  hosts: "_tag_LC_ENV_{{ lc_env }}"
  gather_facts: no
  become: yes

  tasks:
  - debug: var=groups['tag_Platform_Satellite'][0]
    when: groups['tag_Platform_Satellite'][0] is defined

  - name: "remove rhui"
    ansible.builtin.yum:
      name: rh-amazon-rhui-client*
      state: absent

  - name: "start rhsmcertd"
    ansible.builtin.systemd:
      name: rhsmcertd
      enabled: yes
      state: started

  - name: "check registration status"
    ansible.builtin.shell: >
      subscription-manager status |
      grep "Overall Status:" |
      awk -F': ' '{print $2}'
    register: sub_status

  - name: "run host registration command"
    ansible.builtin.shell:
      "{{ hostvars[groups['tag_Platform_Satellite'][0]]['reg_command'] }}"
    register: run_reg
    when: '"Current" not in sub_status.stdout'

  - name: "check registration status"
    ansible.builtin.shell: >
      subscription-manager status |
      grep "Overall Status:" |
      awk -F': ' '{print $2}'
    register: sub_status

  - name: "enable satellite tools repo"
    ansible.builtin.command: >
      subscription-manager repos
      --enable="satellite-tools-*-rpms"
    when: '"Current" in sub_status.stdout'

  - name: "subscription-manager refresh"
    ansible.builtin.command: >
      subscription-manager refresh
    when: '"Current" in sub_status.stdout'

  - name: "subscription-manager update facts"
    ansible.builtin.command: >
      subscription-manager facts
      --update
    when: '"Current" in sub_status.stdout'
